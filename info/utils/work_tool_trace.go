package utils

import (
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"runtime/trace"
	"strings"
	"time"
)

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–Ω—è—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
type SimpleResult struct {
	Name       string
	Duration   time.Duration
	MemoryUsed string
	Goroutines int
	Issues     []string
}

// –û–°–ù–û–í–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–õ–Ø UI
type AnalysisResult struct {
	Name             string        `json:"name"`
	Duration         time.Duration `json:"duration_ms"`
	DurationReadable string        `json:"duration_readable"`
	MemoryUsed       string        `json:"memory_used"`
	MemoryBytes      int64         `json:"memory_bytes"`
	Goroutines       int           `json:"goroutines"`
	Status           string        `json:"status"`
	Issues           []string      `json:"issues"`
	Severity         string        `json:"severity"`
	Timestamp        time.Time     `json:"timestamp"`
}

type AnalysisReport struct {
	Results       []AnalysisResult `json:"results"`
	Timestamp     time.Time        `json:"timestamp"`
	GoVersion     string           `json:"go_version"`
	TotalExamples int              `json:"total_examples"`
}

func SimpleAnalyze() (*AnalysisReport, error) {
	fmt.Println("–ó–ê–ü–£–°–ö –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
	fmt.Println("===================================")

	// –°–æ–∑–¥–∞–µ–º trace —Ñ–∞–π–ª
	f, err := os.Create("sequential_trace.out")
	if err != nil {
		return nil, err
	}
	defer f.Close()

	trace.Start(f)
	defer trace.Stop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑
	results := runSequentialAnalysis()

	// –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è UI
	report := createAnalysisReport(results)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
	if err := saveReportToJSON(report); err != nil {
		return nil, err
	}

	// –í—ã–≤–æ–¥–∏–º –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç—á–µ—Ç
	printSequentialReport(results)

	fmt.Println("\nüí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: go tool trace sequential_trace.out")
	fmt.Println("üìÅ JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: analysis_report.json")

	return report, nil
}

// üéØ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó - –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
func runSequentialAnalysis() []AnalysisResult {
	var results []AnalysisResult

	examples := map[string]func(){
		"simpleGoroutine": simpleGoroutine,
		"withWaitGroup":   withWaitGroup,
		"channelParam":    channelParam,
		"returnChannel":   returnChannel,
		"withRange":       withRange,
		"withSelect":      withSelect,
		"withErrGroup":    withErrGroup,
		"mergeChannels":   mergeChannels,
		"runTasks":        runTasks,
	}

	fmt.Printf("üîÑ –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ %d –ø—Ä–∏–º–µ—Ä–æ–≤...\n", len(examples))

	// –ó–ê–ü–£–°–ö–ê–ï–ú –ö–ê–ñ–î–´–ô –¢–ï–°–¢ –ü–û –û–ß–ï–†–ï–î–ò
	for name, testFunc := range examples {
		fmt.Printf("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: %s...\n", name)

		// üßπ –î–ê–ï–ú –í–†–ï–ú–Ø –ù–ê –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–†–ï–î–´–î–£–©–ò–• –ì–û–†–£–¢–ò–ù
		time.Sleep(100 * time.Millisecond)

		// –ó–ê–ü–û–ú–ò–ù–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –î–û –¢–ï–°–¢–ê
		goroutinesBefore := runtime.NumGoroutine()
		var memBefore runtime.MemStats
		runtime.ReadMemStats(&memBefore)
		startTime := time.Now()

		// –í–´–ü–û–õ–ù–Ø–ï–ú –¢–ï–°–¢–ò–†–£–ï–ú–£–Æ –§–£–ù–ö–¶–ò–Æ
		testFunc()

		// –ó–ê–ü–û–ú–ò–ù–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –¢–ï–°–¢–ê
		duration := time.Since(startTime)

		// –î–ê–ï–ú –í–†–ï–ú–Ø –ù–ê –ó–ê–í–ï–†–®–ï–ù–ò–ï –ì–û–†–£–¢–ò–ù –¢–ï–ö–£–©–ï–ì–û –¢–ï–°–¢–ê
		time.Sleep(50 * time.Millisecond)

		goroutinesAfter := runtime.NumGoroutine()
		var memAfter runtime.MemStats
		runtime.ReadMemStats(&memAfter)

		// –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´
		memoryDelta := int64(memAfter.Alloc - memBefore.Alloc)
		goroutineDelta := goroutinesAfter - goroutinesBefore
		issues := analyzePerformance(name, duration, goroutinesBefore, goroutinesAfter, memoryDelta, memBefore, memAfter)
		status, severity := determineStatusAndSeverity(issues)

		// –°–û–ó–î–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
		result := AnalysisResult{
			Name:             name,
			Duration:         duration,
			DurationReadable: formatDuration(duration),
			MemoryUsed:       formatBytes(uint64(memoryDelta)),
			MemoryBytes:      memoryDelta,
			Goroutines:       goroutineDelta,
			Status:           status,
			Issues:           issues,
			Severity:         severity,
			Timestamp:        time.Now(),
		}

		results = append(results, result)

		// –í–´–í–û–î–ò–ú –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
		statusIcon := "‚úÖ"
		if status == "warning" {
			statusIcon = "‚ö†Ô∏è"
		} else if status == "error" {
			statusIcon = "üö®"
		}
		fmt.Printf("%s %s: %s, –ø–∞–º—è—Ç—å: %s, –≥–æ—Ä—É—Ç–∏–Ω—ã: %+d\n",
			statusIcon, name, formatDuration(duration),
			formatBytes(uint64(memoryDelta)), goroutineDelta)
	}

	return results
}

// –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (–û–°–¢–ê–ï–¢–°–Ø –ü–†–ï–ñ–ù–ò–ú)
func analyzePerformance(name string, duration time.Duration, startGoroutines, endGoroutines int, memoryDelta int64, memBefore, memAfter runtime.MemStats) []string {
	var issues []string

	// –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
	if duration > 500*time.Millisecond {
		issues = append(issues, fmt.Sprintf("–ú–ï–î–õ–ï–ù–ù–û: %v", duration))
	}

	// üéØ –¢–ï–ü–ï–†–¨ –≠–¢–û–¢ –ü–û–†–û–ì –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!
	if endGoroutines > startGoroutines+3 {
		issues = append(issues, fmt.Sprintf("–£–¢–ï–ß–ö–ê: +%d –≥–æ—Ä—É—Ç–∏–Ω", endGoroutines-startGoroutines))
	}

	if memoryDelta > 5*1024*1024 { // 5MB
		issues = append(issues, fmt.Sprintf("–ú–ù–û–ì–û –ü–ê–ú–Ø–¢–ò: %s", formatBytes(uint64(memoryDelta))))
	}

	if memAfter.NumGC > memBefore.NumGC+2 {
		issues = append(issues, "–ß–ê–°–¢–´–ô GC")
	}

	if len(issues) == 0 {
		issues = append(issues, "‚úÖ –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º")
	}

	return issues
}

// –û–ü–†–ï–î–ï–õ–Ø–ï–ú –°–¢–ê–¢–£–° –ò –°–ï–†–¨–ï–ó–ù–û–°–¢–¨
func determineStatusAndSeverity(issues []string) (string, string) {
	hasError := false
	hasWarning := false

	for _, issue := range issues {
		if issue != "‚úÖ –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º" {
			if strings.Contains(issue, "–£–¢–ï–ß–ö–ê") || strings.Contains(issue, "–ú–ï–î–õ–ï–ù–ù–û:") {
				hasError = true
			} else {
				hasWarning = true
			}
		}
	}

	if hasError {
		return "error", "high"
	} else if hasWarning {
		return "warning", "medium"
	}
	return "success", "low"
}

// –°–û–ó–î–ê–ï–ú –û–¢–ß–ï–¢ –î–õ–Ø UI
func createAnalysisReport(results []AnalysisResult) *AnalysisReport {
	report := &AnalysisReport{
		Results:       results,
		Timestamp:     time.Now(),
		GoVersion:     runtime.Version(),
		TotalExamples: len(results),
	}

	return report
}

// –°–û–•–†–ê–ù–Ø–ï–ú –í JSON
func saveReportToJSON(report *AnalysisReport) error {
	data, err := json.MarshalIndent(report, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile("analysis_report.json", data, 0644)
}

// –í–´–í–û–î–ò–ú –û–¢–ß–ï–¢
func printSequentialReport(results []AnalysisResult) {
	fmt.Println("\n" + strings.Repeat("=", 50))
	fmt.Println("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
	fmt.Println(strings.Repeat("=", 50))

	success, warnings, errors := 0, 0, 0
	var totalDuration time.Duration

	for _, result := range results {
		totalDuration += result.Duration

		switch result.Status {
		case "success":
			success++
		case "warning":
			warnings++
		case "error":
			errors++
		}

		statusIcon := "‚úÖ"
		if result.Status == "warning" {
			statusIcon = "‚ö†Ô∏è"
		} else if result.Status == "error" {
			statusIcon = "üö®"
		}

		fmt.Printf("\n%s %s\n", statusIcon, result.Name)
		fmt.Printf("   ‚îú‚îÄ –í—Ä–µ–º—è: %s\n", result.DurationReadable)
		fmt.Printf("   ‚îú‚îÄ –ü–∞–º—è—Ç—å: %s\n", result.MemoryUsed)
		fmt.Printf("   ‚îú‚îÄ –ì–æ—Ä—É—Ç–∏–Ω—ã: %+d\n", result.Goroutines)
		fmt.Printf("   ‚îî‚îÄ –ü—Ä–æ–±–ª–µ–º—ã: %s\n", formatIssues(result.Issues))
	}

	// –°–í–û–î–ö–ê
	fmt.Println("\n" + strings.Repeat("-", 50))
	fmt.Println("üìà –°–í–û–î–ö–ê:")
	fmt.Printf("   ‚îú‚îÄ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: %d\n", len(results))
	fmt.Printf("   ‚îú‚îÄ –£—Å–ø–µ—à–Ω—ã—Ö: %d\n", success)
	fmt.Printf("   ‚îú‚îÄ –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: %d\n", warnings)
	fmt.Printf("   ‚îú‚îÄ –° –æ—à–∏–±–∫–∞–º–∏: %d\n", errors)
	fmt.Printf("   ‚îú‚îÄ –û–±—â–µ–µ –≤—Ä–µ–º—è: %s\n", formatDuration(totalDuration))
	fmt.Printf("   ‚îî‚îÄ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: %s\n", formatDuration(totalDuration/time.Duration(len(results))))
}

// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
func formatBytes(bytes uint64) string {
	if bytes < 1024 {
		return fmt.Sprintf("%d B", bytes)
	} else if bytes < 1024*1024 {
		return fmt.Sprintf("%.1f KB", float64(bytes)/1024)
	} else {
		return fmt.Sprintf("%.1f MB", float64(bytes)/(1024*1024))
	}
}

func formatDuration(d time.Duration) string {
	if d < time.Microsecond {
		return fmt.Sprintf("%d ns", d.Nanoseconds())
	} else if d < time.Millisecond {
		return fmt.Sprintf("%.1f ¬µs", float64(d.Microseconds()))
	} else if d < time.Second {
		return fmt.Sprintf("%.1f ms", float64(d.Milliseconds()))
	} else {
		return fmt.Sprintf("%.2f s", d.Seconds())
	}
}

func formatIssues(issues []string) string {
	if len(issues) == 0 {
		return "–Ω–µ—Ç"
	}
	return strings.Join(issues, ", ")
}
